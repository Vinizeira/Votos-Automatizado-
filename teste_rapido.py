#!/usr/bin/env python3
"""
Teste R√°pido do Sistema de Vota√ß√£o
Verifica se todas as funcionalidades est√£o funcionando
"""

import os
import sys
import json
import time
from datetime import datetime

def testar_imports():
    """Testa se todas as depend√™ncias est√£o dispon√≠veis"""
    print("üîß Testando imports...")
    
    try:
        import requests
        print("‚úÖ requests - OK")
    except ImportError as e:
        print(f"‚ùå requests - ERRO: {e}")
        return False
    
    try:
        import psutil
        print("‚úÖ psutil - OK")
    except ImportError as e:
        print(f"‚ùå psutil - ERRO: {e}")
        return False
    
    try:
        import threading
        print("‚úÖ threading - OK")
    except ImportError as e:
        print(f"‚ùå threading - ERRO: {e}")
        return False
    
    try:
        import logging
        print("‚úÖ logging - OK")
    except ImportError as e:
        print(f"‚ùå logging - ERRO: {e}")
        return False
    
    return True

def testar_arquivos():
    """Testa se todos os arquivos necess√°rios existem"""
    print("\nüìÅ Testando arquivos...")
    
    arquivos_necessarios = [
        "ataque_otimizado.py",
        "monitor_sistema.py", 
        "iniciar_sistema.py",
        "config_votacao.py",
        "requirements.txt"
    ]
    
    todos_ok = True
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo} - OK")
        else:
            print(f"‚ùå {arquivo} - FALTANDO")
            todos_ok = False
    
    return todos_ok

def testar_configuracao():
    """Testa se a configura√ß√£o est√° v√°lida"""
    print("\n‚öôÔ∏è Testando configura√ß√£o...")
    
    try:
        from config_votacao import CONFIGURACAO_BASICA, USER_AGENTS, HEADERS_BASE
        
        if CONFIGURACAO_BASICA["url"]:
            print("‚úÖ URL configurada - OK")
        else:
            print("‚ùå URL n√£o configurada")
            return False
        
        if CONFIGURACAO_BASICA["token_prefix"]:
            print("‚úÖ Token prefix configurado - OK")
        else:
            print("‚ùå Token prefix n√£o configurado")
            return False
        
        if len(USER_AGENTS) > 0:
            print(f"‚úÖ {len(USER_AGENTS)} User Agents configurados - OK")
        else:
            print("‚ùå Nenhum User Agent configurado")
            return False
        
        if len(HEADERS_BASE) > 0:
            print(f"‚úÖ {len(HEADERS_BASE)} Headers configurados - OK")
        else:
            print("‚ùå Headers n√£o configurados")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar configura√ß√£o: {e}")
        return False

def testar_conectividade():
    """Testa conectividade b√°sica"""
    print("\nüåê Testando conectividade...")
    
    try:
        import requests
        from config_votacao import CONFIGURACAO_BASICA
        
        response = requests.get(CONFIGURACAO_BASICA["url"], timeout=10)
        if response.status_code == 200:
            print("‚úÖ Servidor respondendo - OK")
            return True
        else:
            print(f"‚ö†Ô∏è Servidor retornou status {response.status_code}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå Timeout ao conectar com servidor")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro de conex√£o com servidor")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao testar conectividade: {e}")
        return False

def testar_sistema_principal():
    """Testa se o sistema principal pode ser importado"""
    print("\nüöÄ Testando sistema principal...")
    
    try:
        # Testar importa√ß√£o das classes
        sys.path.append('.')
        from ataque_otimizado import ConfiguracaoSistema, SistemaVotacao
        
        # Testar cria√ß√£o de inst√¢ncias
        config = ConfiguracaoSistema()
        print("‚úÖ Configura√ß√£oSistema - OK")
        
        sistema = SistemaVotacao()
        print("‚úÖ SistemaVotacao - OK")
        
        # Testar m√©todos b√°sicos
        headers = sistema.gerar_headers()
        if headers and "user-agent" in headers:
            print("‚úÖ Gera√ß√£o de headers - OK")
        else:
            print("‚ùå Gera√ß√£o de headers falhou")
            return False
        
        payload = sistema.criar_payload("test")
        if payload and "submitVote" in payload:
            print("‚úÖ Cria√ß√£o de payload - OK")
        else:
            print("‚ùå Cria√ß√£o de payload falhou")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar sistema principal: {e}")
        return False

def testar_monitor():
    """Testa se o monitor pode ser importado"""
    print("\nüîç Testando monitor...")
    
    try:
        sys.path.append('.')
        from monitor_sistema import MonitorSistema
        
        monitor = MonitorSistema()
        print("‚úÖ MonitorSistema - OK")
        
        # Testar verifica√ß√£o de processo
        proc = monitor.verificar_processo_rodando()
        print("‚úÖ Verifica√ß√£o de processo - OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar monitor: {e}")
        return False

def testar_salvamento_progresso():
    """Testa o sistema de salvamento de progresso"""
    print("\nüíæ Testando salvamento de progresso...")
    
    try:
        # Criar dados de teste
        progresso_teste = {
            "total_votos": 100,
            "votos_sucesso": 95,
            "votos_erro": 5,
            "timestamp": datetime.now().isoformat(),
            "tempo_execucao": 3600
        }
        
        # Salvar
        with open("teste_progresso.json", "w") as f:
            json.dump(progresso_teste, f, indent=2)
        print("‚úÖ Salvamento - OK")
        
        # Carregar
        with open("teste_progresso.json", "r") as f:
            progresso_carregado = json.load(f)
        
        if progresso_carregado["total_votos"] == 100:
            print("‚úÖ Carregamento - OK")
        else:
            print("‚ùå Carregamento falhou")
            return False
        
        # Limpar arquivo de teste
        os.remove("teste_progresso.json")
        print("‚úÖ Limpeza - OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar salvamento: {e}")
        return False

def main():
    """Fun√ß√£o principal do teste"""
    print("üß™ TESTE R√ÅPIDO DO SISTEMA DE VOTA√á√ÉO")
    print("=" * 50)
    
    testes = [
        ("Imports", testar_imports),
        ("Arquivos", testar_arquivos),
        ("Configura√ß√£o", testar_configuracao),
        ("Conectividade", testar_conectividade),
        ("Sistema Principal", testar_sistema_principal),
        ("Monitor", testar_monitor),
        ("Salvamento", testar_salvamento_progresso)
    ]
    
    resultados = []
    
    for nome, teste in testes:
        try:
            resultado = teste()
            resultados.append((nome, resultado))
        except Exception as e:
            print(f"‚ùå Erro no teste {nome}: {e}")
            resultados.append((nome, False))
    
    # Resumo
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    sucessos = 0
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{nome}: {status}")
        if resultado:
            sucessos += 1
    
    print(f"\nüéØ Resultado: {sucessos}/{len(resultados)} testes passaram")
    
    if sucessos == len(resultados):
        print("üéâ SISTEMA PRONTO PARA USO!")
        print("\nPara iniciar:")
        print("  python iniciar_sistema.py")
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verifique os erros acima.")
        print("\nPara instalar depend√™ncias:")
        print("  pip install -r requirements.txt")

if __name__ == "__main__":
    main()
